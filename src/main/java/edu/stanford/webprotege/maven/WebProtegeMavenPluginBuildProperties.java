package edu.stanford.webprotege.maven;

import org.apache.maven.plugin.logging.Log;
import org.apache.maven.project.MavenProject;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Matthew Horridge
 * Stanford Center for Biomedical Informatics Research
 * 2018-11-09
 */
public class WebProtegeMavenPluginBuildProperties {

    private static final String BUILD_TIMESTAMP = "build.timestamp";

    private final Path buildDirectoryPath;

    private final Log log;

    private WebProtegeMavenPluginBuildProperties(Path buildDirectoryPath, Log log) {
        this.buildDirectoryPath = checkNotNull(buildDirectoryPath);
        this.log = checkNotNull(log);
    }

    protected static WebProtegeMavenPluginBuildProperties get(Path buildDirectoryPath, Log log) {
        return new WebProtegeMavenPluginBuildProperties(buildDirectoryPath, log);
    }

    public static WebProtegeMavenPluginBuildProperties get(MavenProject mavenProject, Log log) {
        var outputDir = mavenProject.getBuild().getDirectory();
        var outputPath = Paths.get(outputDir);
        return get(outputPath, log);
    }

    public long getTimestamp() {
        var buildPropertiesPath = getBuildPropertiesPath();
        if(Files.exists(buildPropertiesPath)) {
            try(var inputStream = new BufferedInputStream(Files.newInputStream(buildPropertiesPath))) {
                Properties properties = new Properties();
                properties.load(inputStream);
                var buildTimestamp = properties.getProperty(BUILD_TIMESTAMP, "0");
                long timestamp = Long.parseLong(buildTimestamp);
                log.info("Last build timestamp: " + timestamp);
                return timestamp;
            }
            catch(IOException | NumberFormatException ex) {
                log.error(ex);
                return 0L;
            }
        }
        else {
            return 0L;
        }
    }

    public void setTimestamp(long timestamp) {
        var buildPropertiesPath = getBuildPropertiesPath();
        try {
            Files.createDirectories(buildPropertiesPath.getParent());
        } catch(IOException e) {
            log.error(e);
            return;
        }
        try(var outputStream = new BufferedOutputStream(Files.newOutputStream(buildPropertiesPath))) {

            Properties properties = new Properties();
            properties.put(BUILD_TIMESTAMP, Long.toString(timestamp));
            properties.store(outputStream, "Generated by the webprotege-maven-plugin.  Do not edit.");
        } catch(Exception e) {
            log.error(e);
        }
    }

    private Path getBuildPropertiesPath() {
        return buildDirectoryPath
                        .resolve("webprotege-maven-plugin")
                        .resolve("build.properties");
    }
}
