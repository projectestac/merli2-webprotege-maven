#* @vtlvariable name="importedPackages" type="java.util.Collection<java.lang.String>" *#
#* @vtlvariable name="desc" type="edu.stanford.webprotege.maven.PortletTypeDescriptor" *#

package edu.stanford.bmir.protege.web.client.portlet;

import com.google.gwt.core.client.GWT;
import edu.stanford.bmir.protege.web.client.portlet.PortletFactory;
import edu.stanford.bmir.protege.web.shared.PortletId;

import java.util.HashMap;
import java.util.Map;

import com.google.common.base.Optional;
import com.google.inject.Provider;
import edu.stanford.bmir.protege.web.client.portlet.WebProtegePortlet;

import javax.inject.Inject;

import static com.google.common.base.Preconditions.checkNotNull;
import java.util.List;
import java.util.ArrayList;


#foreach($pkg in $importedPackages)
import $pkg.*;
#end

/**
 * This source file is automatically generated by the WebProtege Maven Plugin.
 *
 * This factory is capable of instantiating the following portlets
 *
 *  #foreach($desc in $descriptors)
 *      $desc.canonicalClassName
 *  #end
 *
 */
public class PortletFactoryGenerated implements PortletFactory {

    private final Map<PortletId, Provider<? extends WebProtegePortlet>> id2PresenterMap = new HashMap<>();

    private final Map<PortletId, PortletDescriptor> id2DescriptorMap = new HashMap<>();

    private final List<PortletDescriptor> porletDescriptorList = new ArrayList<>();

    @Inject
    public PortletFactoryGenerated(
        #foreach($desc in $descriptors)
        Provider<$desc.simpleName> providerOf_$desc.simpleName#if( $foreach.hasNext ),
        #else

        #end
        #end
    ) {
        #foreach($desc in $descriptors)

            // $desc.canonicalClassName
            addPortlet(
                    new PortletDescriptor(
                            new PortletId("$desc.getId()"),
                            "$desc.getEscapedTitle()",
                            "$desc.getEscapedTooltip()"),
                    providerOf_$desc.getSimpleName());

        #end
    }

    private void addPortlet(PortletDescriptor portletDesciptor, Provider<? extends WebProtegePortlet> provider) {
        id2PresenterMap.put(portletDesciptor.getPortletId(), provider);
        id2DescriptorMap.put(portletDesciptor.getPortletId(), portletDesciptor);
        porletDescriptorList.add(portletDesciptor);
    }

    public List<PortletDescriptor> getAvailablePortletDescriptors() {
        return new ArrayList<>(porletDescriptorList);
    }

    public Optional<WebProtegePortlet> createPortlet(PortletId portletId) {
        checkNotNull(portletId);
        GWT.log("[PortletFactoryGenerated] Get portlet: " + portletId);
        Provider<? extends WebProtegePortlet> portletProvider = id2PresenterMap.get(portletId);
        if (portletProvider == null) {
            return Optional.absent();
        }
        else {
            WebProtegePortlet portlet = portletProvider.get();
            PortletDescriptor portletDescriptor = id2DescriptorMap.get(portletId);
            portlet.setTitle(portletDescriptor.getTitle());
            return Optional.of(portlet);
        }
    }
}
